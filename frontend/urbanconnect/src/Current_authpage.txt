import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Link } from "react-router-dom";
import {
  ArrowLeft,
  Check,
  ChevronRight,
  Eye,
  EyeOff,
  Loader2,
} from "lucide-react";
import { Button } from "./ui/button";

export default function AuthPage() {
  const [activeTab, setActiveTab] = useState("login");
  const [userType, setUserType] = useState("user");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    confirmPassword: "",
    fullName: "",
    phone: "",
    businessName: "",
    businessCategory: "",
    businessWebsite: "",
    agreeToTerms: false,
  });
  const [errors, setErrors] = useState({});
  const [passwordStrength, setPasswordStrength] = useState(0);

  // Password strength checker
  useEffect(() => {
    if (!formData.password) {
      setPasswordStrength(0);
      return;
    }

    let strength = 0;
    if (formData.password.length >= 8) strength += 1;
    if (/[A-Z]/.test(formData.password)) strength += 1;
    if (/[0-9]/.test(formData.password)) strength += 1;
    if (/[^A-Za-z0-9]/.test(formData.password)) strength += 1;

    setPasswordStrength(strength);
  }, [formData.password]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === "checkbox" ? checked : value,
    });

    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: "",
      });
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.email) {
      newErrors.email = "Email is required";
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "Email is invalid";
    }

    if (!formData.password) {
      newErrors.password = "Password is required";
    } else if (formData.password.length < 8) {
      newErrors.password = "Password must be at least 8 characters";
    }

    if (activeTab === "signup") {
      if (!formData.fullName) {
        newErrors.fullName = "Full name is required";
      }

      if (formData.password !== formData.confirmPassword) {
        newErrors.confirmPassword = "Passwords do not match";
      }

      if (!formData.agreeToTerms) {
        newErrors.agreeToTerms = "You must agree to the terms and conditions";
      }

      if (userType === "provider") {
        if (!formData.businessName) {
          newErrors.businessName = "Business name is required";
        }

        if (!formData.businessCategory) {
          newErrors.businessCategory = "Business category is required";
        }
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    if (validateForm()) {
      setIsLoading(true);

      setTimeout(() => {
        setIsLoading(false);
        console.log("Form submitted successfully", formData);
      }, 1500);
    }
  };

  const handleGoogleLogin = () => {
    setIsLoading(true);

    setTimeout(() => {
      setIsLoading(false);
      console.log("Google login initiated");
    }, 1500);
  };

  return (
    <div className="min-h-screen flex flex-col bg-white">
      {/* Header with back button */}
      <header className="w-full py-4 px-6 flex items-center">
        <Link
          to="/"
          className="flex items-center text-gray-600 hover:text-gray-900 transition-colors"
        >
          <ArrowLeft className="h-5 w-5 mr-2" />
          <span className="text-sm font-medium">Back to Home</span>
        </Link>
      </header>

      <main className="flex-1 flex items-center justify-center p-6">
        <div className="w-full max-w-md">
          {/* Logo and Title */}
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center h-12 w-12 rounded-xl bg-gray-900 text-white mb-4">
              <svg
                viewBox="0 0 24 24"
                fill="none"
                className="h-6 w-6"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                <polyline points="9 22 9 12 15 12 15 22"></polyline>
              </svg>
            </div>
            <h1 className="text-2xl font-bold text-gray-900">Urban Connect</h1>
            <p className="text-gray-500 mt-2">
              {activeTab === "login"
                ? "Welcome back! Please login to your account."
                : "Create an account to get started."}
            </p>
          </div>

          {/* Auth Card */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden"
          >
            {/* Tabs */}
            <div className="flex border-b border-gray-200">
              <button
                onClick={() => setActiveTab("login")}
                className={`flex-1 py-4 text-sm font-medium transition-colors relative ${
                  activeTab === "login"
                    ? "bg-white  text-gray-900 hover:border-slate-100"
                    : "bg-white  text-gray-900 hover:border-slate-100"
                }`}
              >
                Login
                {activeTab === "login" && (
                  <motion.div
                    layoutId="activeTab"
                    className="absolute bottom-0 left-0 right-0 h-0.5 bg-gray-900"
                  />
                )}
              </button>
              <button
                onClick={() => setActiveTab("signup")}
                className={`flex-1 py-4 text-sm font-medium transition-colors relative ${
                  activeTab === "signup"
                    ? "bg-white  text-gray-900 hover:border-slate-100"
                    : "bg-white text-gray-900 hover:border-slate-100"
                }`}
              >
                Sign Up
                {activeTab === "signup" && (
                  <motion.div
                    layoutId="activeTab"
                    className="absolute bottom-0 left-0 right-0 h-0.5 bg-gray-900"
                  />
                )}
              </button>
            </div>

            {/* Form Content */}
            <div className="p-6">
              <AnimatePresence mode="wait">
                <motion.div
                  key={activeTab}
                  initial={{ opacity: 0, x: activeTab === "login" ? -20 : 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: activeTab === "login" ? 20 : -20 }}
                  transition={{ duration: 0.3 }}
                >
                  {/* User Type Selection (only for signup) */}
                  {activeTab === "signup" && (
                    <div className="mb-6">
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        I am a:
                      </label>
                      <div className="grid grid-cols-2 gap-4">
                        <button
                          type="button"
                          onClick={() => setUserType("user")}
                          className={`relative flex flex-col items-center justify-center p-4 rounded-xl border-2 transition-all ${
                            userType === "user"
                              ? "border-gray-900 bg-gray-50"
                              : "bg-white border-2 border-slate-800 text-gray-900 hover:border-slate-100"
                          }`}
                        >
                          {userType === "user" && (
                            <div className="absolute top-2 right-2 h-5 w-5 bg-gray-900 rounded-full flex items-center justify-center">
                              <Check className="h-3 w-3 text-white" />
                            </div>
                          )}
                          <svg
                            className="h-8 w-8 mb-2 text-gray-700"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                            />
                          </svg>
                          <span className="text-sm font-medium text-gray-900">
                            Normal User
                          </span>
                        </button>
                        <button
                          type="button"
                          onClick={() => setUserType("provider")}
                          className={`relative flex flex-col items-center justify-center p-4 rounded-xl border-2 transition-all ${
                            userType === "provider"
                              ? "border-gray-900 bg-gray-50"
                              : "bg-white border-2 border-slate-800 text-gray-900 hover:border-slate-100"
                          }`}
                        >
                          {userType === "provider" && (
                            <div className="absolute top-2 right-2 h-5 w-5 bg-gray-900 rounded-full flex items-center justify-center">
                              <Check className="h-3 w-3 text-white" />
                            </div>
                          )}
                          <svg
                            className="h-8 w-8 mb-2 text-gray-700"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                            />
                          </svg>
                          <span className="text-sm font-medium text-gray-900">
                            Service Provider
                          </span>
                        </button>
                      </div>
                    </div>
                  )}

                  <form onSubmit={handleSubmit}>
                    {/* Login Form */}
                    {activeTab === "login" && (
                      <>
                        {/* Email Field */}
                        <div className="mb-4">
                          <label
                            htmlFor="email"
                            className="block text-sm font-medium text-gray-700 mb-1"
                          >
                            Email Address
                          </label>
                          <div
                            className={`relative rounded-lg border ${
                              errors.email
                                ? "border-red-500"
                                : "border-gray-300 focus-within:border-gray-900"
                            } transition-colors`}
                          >
                            <input
                              type="email"
                              id="email"
                              name="email"
                              value={formData.email}
                              onChange={handleChange}
                              className="block w-full px-4 py-3 bg-transparent text-gray-900 placeholder-gray-400 focus:outline-none text-sm"
                              placeholder="you@example.com"
                            />
                          </div>
                          {errors.email && (
                            <p className="mt-1 text-sm text-red-500">
                              {errors.email}
                            </p>
                          )}
                        </div>

                        {/* Password Field */}
                        <div className="mb-6">
                          <div className="flex justify-between mb-1">
                            <label
                              htmlFor="password"
                              className="block text-sm font-medium text-gray-700"
                            >
                              Password
                            </label>
                            <Link
                              to="#"
                              className="text-xs text-gray-500 hover:text-gray-700"
                            >
                              Forgot password?
                            </Link>
                          </div>
                          <div
                            className={`relative rounded-lg border ${
                              errors.password
                                ? "border-red-500"
                                : "border-gray-300 focus-within:border-gray-900"
                            } transition-colors`}
                          >
                            <input
                              type={showPassword ? "text" : "password"}
                              id="password"
                              name="password"
                              value={formData.password}
                              onChange={handleChange}
                              className="block w-full px-4 py-3 bg-transparent text-gray-900 placeholder-gray-400 focus:outline-none text-sm pr-10"
                              placeholder="••••••••"
                            />
                            <button
                              type="button"
                              className="absolute bg-myWhite border inset-y-0 right-0 flex items-center px-3 text-gray-800 hover:text-gray-600"
                              onClick={() => setShowPassword(!showPassword)}
                            >
                              {showPassword ? (
                                <EyeOff className="h-5 w-5 " />
                              ) : (
                                <Eye className="h-5 w-5 " />
                              )}
                            </button>
                          </div>
                          {errors.password && (
                            <p className="mt-1 text-sm text-red-500">
                              {errors.password}
                            </p>
                          )}
                        </div>

                        {/* Login Button */}
                        <Button
                          type="submit"
                          disabled={isLoading}
                          className="w-full py-3 h-auto bg-gray-900 hover:border-gray-800 hover:bg-gray-800 text-white rounded-lg font-medium text-sm transition-colors"
                        >
                          {isLoading ? (
                            <Loader2 className="h-5 w-5 animate-spin mr-2" />
                          ) : (
                            "Login"
                          )}
                        </Button>
                      </>
                    )}

                    {/* Signup Form */}
                    {activeTab === "signup" && (
                      <>
                        {/* Business Name (Service Provider only) */}
                        {userType === "provider" && (
                          <div className="mb-4">
                            <label
                              htmlFor="businessName"
                              className="block text-sm font-medium text-gray-700 mb-1"
                            >
                              Business Name
                            </label>
                            <div
                              className={`relative rounded-lg border ${
                                errors.businessName
                                  ? "border-red-500"
                                  : "border-gray-300 focus-within:border-gray-900"
                              } transition-colors`}
                            >
                              <input
                                type="text"
                                id="businessName"
                                name="businessName"
                                value={formData.businessName}
                                onChange={handleChange}
                                className="block w-full px-4 py-3 bg-transparent text-gray-900 placeholder-gray-400 focus:outline-none text-sm"
                                placeholder="Your Business Name"
                              />
                            </div>
                            {errors.businessName && (
                              <p className="mt-1 text-sm text-red-500">
                                {errors.businessName}
                              </p>
                            )}
                          </div>
                        )}

                        {/* Full Name */}
                        <div className="mb-4">
                          <label
                            htmlFor="fullName"
                            className="block text-sm font-medium text-gray-700 mb-1"
                          >
                            Full Name
                          </label>
                          <div
                            className={`relative rounded-lg border ${
                              errors.fullName
                                ? "border-red-500"
                                : "border-gray-300 focus-within:border-gray-900"
                            } transition-colors`}
                          >
                            <input
                              type="text"
                              id="fullName"
                              name="fullName"
                              value={formData.fullName}
                              onChange={handleChange}
                              className="block w-full px-4 py-3 bg-transparent text-gray-900 placeholder-gray-400 focus:outline-none text-sm"
                              placeholder="John Doe"
                            />
                          </div>
                          {errors.fullName && (
                            <p className="mt-1 text-sm text-red-500">
                              {errors.fullName}
                            </p>
                          )}
                        </div>

                        {/* Email Field */}
                        <div className="mb-4">
                          <label
                            htmlFor="signupEmail"
                            className="block text-sm font-medium text-gray-700 mb-1"
                          >
                            Email Address
                          </label>
                          <div
                            className={`relative rounded-lg border ${
                              errors.email
                                ? "border-red-500"
                                : "border-gray-300 focus-within:border-gray-900"
                            } transition-colors`}
                          >
                            <input
                              type="email"
                              id="signupEmail"
                              name="email"
                              value={formData.email}
                              onChange={handleChange}
                              className="block w-full px-4 py-3 bg-transparent text-gray-900 placeholder-gray-400 focus:outline-none text-sm"
                              placeholder="you@example.com"
                            />
                          </div>
                          {errors.email && (
                            <p className="mt-1 text-sm text-red-500">
                              {errors.email}
                            </p>
                          )}
                        </div>

                        {/* Phone Number */}
                        <div className="mb-4">
                          <label
                            htmlFor="phone"
                            className="block text-sm font-medium text-gray-700 mb-1"
                          >
                            Phone Number{" "}
                            <span className="text-gray-400 text-xs">
                              (Optional)
                            </span>
                          </label>
                          <div className="relative rounded-lg border border-gray-300 focus-within:border-gray-900 transition-colors">
                            <input
                              type="tel"
                              id="phone"
                              name="phone"
                              value={formData.phone}
                              onChange={handleChange}
                              className="block w-full px-4 py-3 bg-transparent text-gray-900 placeholder-gray-400 focus:outline-none text-sm"
                              placeholder="+1 (555) 123-4567"
                            />
                          </div>
                        </div>

                        {/* Business Category (Service Provider only) */}
                        {userType === "provider" && (
                          <div className="mb-4">
                            <label
                              htmlFor="businessCategory"
                              className="block text-sm font-medium text-gray-700 mb-1"
                            >
                              Business Category
                            </label>
                            <div
                              className={`relative rounded-lg border ${
                                errors.businessCategory
                                  ? "border-red-500"
                                  : "border-gray-300 focus-within:border-gray-900"
                              } transition-colors`}
                            >
                              <select
                                id="businessCategory"
                                name="businessCategory"
                                value={formData.businessCategory}
                                onChange={handleChange}
                                className="block w-full px-4 py-3 bg-transparent text-gray-900 focus:outline-none text-sm appearance-none"
                              >
                                <option value="" className="text-gray-500">
                                  Select a category
                                </option>
                                <option value="plumber">Plumber</option>
                                <option value="electrician">Electrician</option>
                                <option value="cleaner">Cleaner</option>
                                <option value="carpenter">Carpenter</option>
                                <option value="painter">Painter</option>
                                <option value="gardener">Gardener</option>
                                <option value="other">Other</option>
                              </select>
                              <div className="absolute inset-y-0 right-0 flex items-center px-3 pointer-events-none">
                                <ChevronRight className="h-4 w-4 text-gray-400 rotate-90" />
                              </div>
                            </div>
                            {errors.businessCategory && (
                              <p className="mt-1 text-sm text-red-500">
                                {errors.businessCategory}
                              </p>
                            )}
                          </div>
                        )}

                        {/* Business Website (Service Provider only) */}
                        {userType === "provider" && (
                          <div className="mb-4">
                            <label
                              htmlFor="businessWebsite"
                              className="block text-sm font-medium text-gray-700 mb-1"
                            >
                              Business Website{" "}
                              <span className="text-gray-400 text-xs">
                                (Optional)
                              </span>
                            </label>
                            <div className="relative rounded-lg border border-gray-300 focus-within:border-gray-900 transition-colors">
                              <input
                                type="url"
                                id="businessWebsite"
                                name="businessWebsite"
                                value={formData.businessWebsite}
                                onChange={handleChange}
                                className="block w-full px-4 py-3 bg-transparent text-gray-900 placeholder-gray-400 focus:outline-none text-sm"
                                placeholder="https://yourbusiness.com"
                              />
                            </div>
                          </div>
                        )}

                        {/* Password Field */}
                        <div className="mb-4">
                          <label
                            htmlFor="signupPassword"
                            className="block text-sm font-medium text-gray-700 mb-1"
                          >
                            Password
                          </label>
                          <div
                            className={`relative rounded-lg border ${
                              errors.password
                                ? "border-red-500"
                                : "border-gray-300 focus-within:border-gray-900"
                            } transition-colors`}
                          >
                            <input
                              type={showPassword ? "text" : "password"}
                              id="signupPassword"
                              name="password"
                              value={formData.password}
                              onChange={handleChange}
                              className="block w-full px-4 py-3 bg-transparent text-gray-900 placeholder-gray-400 focus:outline-none text-sm pr-10"
                              placeholder="••••••••"
                            />
                            <button
                              type="button"
                              className="absolute bg-myWhite border inset-y-0 right-0 flex items-center px-3 text-gray-400 hover:text-gray-600"
                              onClick={() => setShowPassword(!showPassword)}
                            >
                              {showPassword ? (
                                <EyeOff className="h-5 w-5" />
                              ) : (
                                <Eye className="h-5 w-5" />
                              )}
                            </button>
                          </div>
                          {errors.password && (
                            <p className="mt-1 text-sm text-red-500">
                              {errors.password}
                            </p>
                          )}

                          {/* Password Strength Indicator */}
                          {formData.password && (
                            <div className="mt-2">
                              <div className="flex items-center gap-1">
                                {[...Array(4)].map((_, index) => (
                                  <div
                                    key={index}
                                    className={`h-1 flex-1 rounded-full ${
                                      index < passwordStrength
                                        ? [
                                            "bg-red-500",
                                            "bg-orange-500",
                                            "bg-yellow-500",
                                            "bg-green-500",
                                          ][passwordStrength - 1]
                                        : "bg-gray-200"
                                    }`}
                                  />
                                ))}
                              </div>
                              <p className="text-xs text-gray-500 mt-1">
                                {passwordStrength === 0 && "Add a password"}
                                {passwordStrength === 1 && "Weak password"}
                                {passwordStrength === 2 && "Fair password"}
                                {passwordStrength === 3 && "Good password"}
                                {passwordStrength === 4 && "Strong password"}
                              </p>
                            </div>
                          )}
                        </div>

                        {/* Confirm Password Field */}
                        <div className="mb-6">
                          <label
                            htmlFor="confirmPassword"
                            className="block text-sm font-medium text-gray-700 mb-1"
                          >
                            Confirm Password
                          </label>
                          <div
                            className={`relative rounded-lg border ${
                              errors.confirmPassword
                                ? "border-red-500"
                                : "border-gray-300 focus-within:border-gray-900"
                            } transition-colors`}
                          >
                            <input
                              type={showConfirmPassword ? "text" : "password"}
                              id="confirmPassword"
                              name="confirmPassword"
                              value={formData.confirmPassword}
                              onChange={handleChange}
                              className="block w-full px-4 py-3 bg-transparent text-gray-900 placeholder-gray-400 focus:outline-none text-sm pr-10"
                              placeholder="••••••••"
                            />
                            <button
                              type="button"
                              className="absolute bg-myWhite border inset-y-0 right-0 flex items-center px-3 text-gray-400 hover:text-gray-600"
                              onClick={() =>
                                setShowConfirmPassword(!showConfirmPassword)
                              }
                            >
                              {showConfirmPassword ? (
                                <EyeOff className="h-5 w-5" />
                              ) : (
                                <Eye className="h-5 w-5" />
                              )}
                            </button>
                          </div>
                          {errors.confirmPassword && (
                            <p className="mt-1 text-sm text-red-500">
                              {errors.confirmPassword}
                            </p>
                          )}
                        </div>

                        {/* Terms and Conditions */}
                        <div className="mb-6">
                          <div className="flex items-center">
                            <input
                              type="checkbox"
                              id="agreeToTerms"
                              name="agreeToTerms"
                              checked={formData.agreeToTerms}
                              onChange={handleChange}
                              className="h-4 w-4  border-gray-300 rounded focus:ring-0"
                            />
                            <label
                              htmlFor="agreeToTerms"
                              className="ml-2 block text-sm  text-gray-600"
                            >
                              I agree to the{" "}
                              <Link
                                to="#"
                                className="text-gray-900 hover:underline"
                              >
                                Terms of Service
                              </Link>{" "}
                              and{" "}
                              <Link
                                to="#"
                                className="text-gray-900 hover:underline"
                              >
                                Privacy Policy
                              </Link>
                            </label>
                          </div>
                          {errors.agreeToTerms && (
                            <p className="mt-1 text-sm text-red-500">
                              {errors.agreeToTerms}
                            </p>
                          )}
                        </div>

                        {/* Signup Button */}
                        <Button
                          type="submit"
                          disabled={isLoading}
                          className="w-full py-3 h-auto bg-gray-900 hover:border-gray-800 hover:bg-gray-800 text-white rounded-lg font-medium text-sm transition-colors"
                        >
                          {isLoading ? (
                            <Loader2 className="h-5 w-5 animate-spin mr-2" />
                          ) : (
                            "Create Account"
                          )}
                        </Button>
                      </>
                    )}
                  </form>

                  {/* Divider */}
                  <div className="mt-6 relative">
                    <div className="absolute inset-0 flex items-center">
                      <div className="w-full border-t border-gray-200"></div>
                    </div>
                    <div className="relative flex justify-center text-sm">
                      <span className="px-2 bg-white text-gray-500">
                        Or continue with
                      </span>
                    </div>
                  </div>

                  {/* Social Login */}
                  <div className="mt-6">
                    <button
                      type="button"
                      onClick={handleGoogleLogin}
                      className="w-full flex items-center justify-center gap-3 py-3 px-4 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 transition-colors"
                    >
                      <svg className="h-5 w-5" viewBox="0 0 24 24">
                        <path
                          d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                          fill="#4285F4"
                        />
                        <path
                          d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                          fill="#34A853"
                        />
                        <path
                          d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                          fill="#FBBC05"
                        />
                        <path
                          d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                          fill="#EA4335"
                        />
                      </svg>
                      <span className="text-sm font-medium text-gray-900">
                        Continue with Google
                      </span>
                    </button>
                  </div>
                </motion.div>
              </AnimatePresence>
            </div>
          </motion.div>

          {/* Footer Text */}
          <div className="mt-8 text-center">
            <p className="text-sm text-gray-500">
              {activeTab === "login" ? (
                <>
                  Don't have an account?{" "}
                  <button
                    onClick={() => setActiveTab("signup")}
                    className="bg-white hover:border-white text-gray-900 font-medium hover:underline"
                  >
                    Sign up
                  </button>
                </>
              ) : (
                <>
                  Already have an account?{" "}
                  <button
                    onClick={() => setActiveTab("login")}
                    className="bg-white hover:border-white text-gray-900 font-medium hover:underline"
                  >
                    Login
                  </button>
                </>
              )}
            </p>
          </div>
        </div>
      </main>

      {/* Footer */}
      <footer className="py-6 px-6 text-center">
        <p className="text-xs text-gray-500">
          © {new Date().getFullYear()} Urban Connect. All rights reserved.
        </p>
        <div className="flex justify-center gap-4 mt-2">
          <Link to="#" className="text-xs text-gray-500 hover:text-gray-700">
            Privacy Policy
          </Link>
          <Link to="#" className="text-xs text-gray-500 hover:text-gray-700">
            Terms of Service
          </Link>
          <Link to="#" className="text-xs text-gray-500 hover:text-gray-700">
            Contact Us
          </Link>
        </div>
      </footer>
    </div>
  );
}



